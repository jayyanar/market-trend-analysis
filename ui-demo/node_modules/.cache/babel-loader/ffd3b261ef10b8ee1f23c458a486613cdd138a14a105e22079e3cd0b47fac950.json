{"ast":null,"code":"import axios from'axios';const MEMORY_ID='runtime_us_market_agent_8e082e5c_mem-B1ZetpF2X2';const RUNTIME_ID='runtime_us_market_agent_8e082e5c-HYMo6FF9Qn';// AgentCore Runtime endpoint - will be set via environment variable\nconst AGENTCORE_ENDPOINT=process.env.REACT_APP_AGENTCORE_ENDPOINT||'https://your-api-gateway-url';class AgentService{constructor(){this.axiosInstance=axios.create({timeout:30000,headers:{'Content-Type':'application/json'}});}async invokeAgent(prompt,actorId,sessionId){try{console.log('Invoking agent:',{prompt,actorId,sessionId});const response=await this.axiosInstance.post(\"\".concat(AGENTCORE_ENDPOINT,\"/invoke\"),{prompt,actor_id:actorId,session_id:sessionId});console.log('Agent response:',response.data);// Handle different response formats\nif(response.data.response&&Array.isArray(response.data.response)){return response.data.response[0];}else if(response.data.response){return response.data.response;}else{return response.data;}}catch(error){console.error('Error invoking agent:',error);// Fallback to mock response for demo\nreturn this.getMockAgentResponse(prompt,actorId);}}async getMemory(actorId){try{console.log('Fetching memory for actor:',actorId);// Direct call to AWS Bedrock Agent Runtime\nconst AWS=window.AWS;if(AWS){const bedrockClient=new AWS.BedrockAgentRuntime({region:'us-east-1'});const params={memoryId:MEMORY_ID,actorId:actorId,maxResults:10};const result=await bedrockClient.retrieveMemory(params).promise();return{actor_id:actorId,memories:result.memories||[],memory_count:result.memories?result.memories.length:0,last_updated:new Date().toISOString()};}// Fallback to API Gateway if AWS SDK not available\nconst response=await this.axiosInstance.get(\"\".concat(AGENTCORE_ENDPOINT,\"/memory/\").concat(actorId));return response.data;}catch(error){console.error('Error fetching memory:',error);// Return mock data for demo\nreturn this.getMockMemoryData(actorId);}}async getSessionHistory(sessionId){try{console.log('Fetching session history:',sessionId);const response=await this.axiosInstance.get(\"\".concat(AGENTCORE_ENDPOINT,\"/session/\").concat(sessionId));return response.data.messages||[];}catch(error){console.error('Error fetching session history:',error);// Return mock data for demo\nreturn this.getMockSessionHistory(sessionId);}}// Mock responses for fallback/demo\ngetMockAgentResponse(prompt,actorId){const users={'Sarah':{name:'Sarah Chen',firm:'Goldman Sachs',focus:'tech stocks, AI, semiconductors'},'Mike':{name:'Mike Johnson',firm:'JP Morgan',focus:'healthcare, biotech'},'Lisa':{name:'Lisa Wang',firm:'Morgan Stanley',focus:'energy, renewables'}};const user=users[actorId]||users['Sarah'];if(prompt.toLowerCase().includes('nvda')||prompt.toLowerCase().includes('nvidia')){return\"Based on your focus on \".concat(user.focus,\", NVDA is currently trading at $875.32, up 2.1% today. Given your investment strategy at \").concat(user.firm,\", this aligns well with your portfolio objectives. The AI chip demand continues to drive growth.\");}else if(prompt.toLowerCase().includes('profile')||prompt.toLowerCase().includes('remember')){return\"I remember you're \".concat(user.name,\" from \").concat(user.firm,\", focusing on \").concat(user.focus,\". Your profile is stored in my AgentCore Memory and I reference it for all our conversations.\");}else if(prompt.toLowerCase().includes('news')){return\"Here are the latest news updates relevant to your \".concat(user.focus,\" focus: Recent developments show strong growth potential. This aligns with your investment strategy at \").concat(user.firm,\".\");}else{return\"Thank you for your message, \".concat(user.name,\". As a \").concat(user.firm,\" broker focused on \").concat(user.focus,\", I'll provide analysis tailored to your investment approach. How can I assist you with market intelligence today?\");}}getMockMemoryData(actorId){const users={'Sarah':{name:'Sarah Chen',firm:'Goldman Sachs',focus:'Tech stocks, AI, semiconductors'},'Mike':{name:'Mike Johnson',firm:'JP Morgan',focus:'Healthcare, biotech investments'},'Lisa':{name:'Lisa Wang',firm:'Morgan Stanley',focus:'Energy, renewable investments'}};const user=users[actorId]||users['Sarah'];return{actor_id:actorId,profile:user,memories:[{timestamp:new Date().toISOString(),type:'profile',content:\"Broker Profile: \".concat(user.name,\" from \").concat(user.firm,\", focuses on \").concat(user.focus)},{timestamp:new Date(Date.now()-3600000).toISOString(),type:'conversation',content:'Previous conversation about market trends and investment strategies'}],memory_count:2,last_updated:new Date().toISOString()};}getMockSessionHistory(sessionId){return[{role:'user',content:'Hi, I\\'m Sarah Chen from Goldman Sachs. I focus on tech stocks, especially AI and semiconductors.',timestamp:new Date(Date.now()-7200000).toISOString()},{role:'assistant',content:'Welcome Sarah! I\\'ve saved your profile to AgentCore Memory. Given your focus on tech stocks, AI, and semiconductors, I can provide tailored market analysis. What specific information would be most valuable to you today?',timestamp:new Date(Date.now()-7100000).toISOString()}];}}export default new AgentService();","map":{"version":3,"names":["axios","MEMORY_ID","RUNTIME_ID","AGENTCORE_ENDPOINT","process","env","REACT_APP_AGENTCORE_ENDPOINT","AgentService","constructor","axiosInstance","create","timeout","headers","invokeAgent","prompt","actorId","sessionId","console","log","response","post","concat","actor_id","session_id","data","Array","isArray","error","getMockAgentResponse","getMemory","AWS","window","bedrockClient","BedrockAgentRuntime","region","params","memoryId","maxResults","result","retrieveMemory","promise","memories","memory_count","length","last_updated","Date","toISOString","get","getMockMemoryData","getSessionHistory","messages","getMockSessionHistory","users","name","firm","focus","user","toLowerCase","includes","profile","timestamp","type","content","now","role"],"sources":["/Users/jayyanar/Downloads/techxconf-2025/market-trend-analysis/ui-demo/src/services/agentService.js"],"sourcesContent":["import axios from 'axios';\n\nconst MEMORY_ID = 'runtime_us_market_agent_8e082e5c_mem-B1ZetpF2X2';\nconst RUNTIME_ID = 'runtime_us_market_agent_8e082e5c-HYMo6FF9Qn';\n\n// AgentCore Runtime endpoint - will be set via environment variable\nconst AGENTCORE_ENDPOINT = process.env.REACT_APP_AGENTCORE_ENDPOINT || 'https://your-api-gateway-url';\n\nclass AgentService {\n  constructor() {\n    this.axiosInstance = axios.create({\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n  }\n\n  async invokeAgent(prompt, actorId, sessionId) {\n    try {\n      console.log('Invoking agent:', { prompt, actorId, sessionId });\n      \n      const response = await this.axiosInstance.post(`${AGENTCORE_ENDPOINT}/invoke`, {\n        prompt,\n        actor_id: actorId,\n        session_id: sessionId\n      });\n      \n      console.log('Agent response:', response.data);\n      \n      // Handle different response formats\n      if (response.data.response && Array.isArray(response.data.response)) {\n        return response.data.response[0];\n      } else if (response.data.response) {\n        return response.data.response;\n      } else {\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Error invoking agent:', error);\n      \n      // Fallback to mock response for demo\n      return this.getMockAgentResponse(prompt, actorId);\n    }\n  }\n\n  async getMemory(actorId) {\n    try {\n      console.log('Fetching memory for actor:', actorId);\n      \n      // Direct call to AWS Bedrock Agent Runtime\n      const AWS = window.AWS;\n      if (AWS) {\n        const bedrockClient = new AWS.BedrockAgentRuntime({\n          region: 'us-east-1'\n        });\n        \n        const params = {\n          memoryId: MEMORY_ID,\n          actorId: actorId,\n          maxResults: 10\n        };\n        \n        const result = await bedrockClient.retrieveMemory(params).promise();\n        \n        return {\n          actor_id: actorId,\n          memories: result.memories || [],\n          memory_count: result.memories ? result.memories.length : 0,\n          last_updated: new Date().toISOString()\n        };\n      }\n      \n      // Fallback to API Gateway if AWS SDK not available\n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/memory/${actorId}`);\n      return response.data;\n      \n    } catch (error) {\n      console.error('Error fetching memory:', error);\n      \n      // Return mock data for demo\n      return this.getMockMemoryData(actorId);\n    }\n  }\n\n  async getSessionHistory(sessionId) {\n    try {\n      console.log('Fetching session history:', sessionId);\n      \n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/session/${sessionId}`);\n      return response.data.messages || [];\n      \n    } catch (error) {\n      console.error('Error fetching session history:', error);\n      \n      // Return mock data for demo\n      return this.getMockSessionHistory(sessionId);\n    }\n  }\n\n  // Mock responses for fallback/demo\n  getMockAgentResponse(prompt, actorId) {\n    const users = {\n      'Sarah': { name: 'Sarah Chen', firm: 'Goldman Sachs', focus: 'tech stocks, AI, semiconductors' },\n      'Mike': { name: 'Mike Johnson', firm: 'JP Morgan', focus: 'healthcare, biotech' },\n      'Lisa': { name: 'Lisa Wang', firm: 'Morgan Stanley', focus: 'energy, renewables' }\n    };\n    \n    const user = users[actorId] || users['Sarah'];\n    \n    if (prompt.toLowerCase().includes('nvda') || prompt.toLowerCase().includes('nvidia')) {\n      return `Based on your focus on ${user.focus}, NVDA is currently trading at $875.32, up 2.1% today. Given your investment strategy at ${user.firm}, this aligns well with your portfolio objectives. The AI chip demand continues to drive growth.`;\n    } else if (prompt.toLowerCase().includes('profile') || prompt.toLowerCase().includes('remember')) {\n      return `I remember you're ${user.name} from ${user.firm}, focusing on ${user.focus}. Your profile is stored in my AgentCore Memory and I reference it for all our conversations.`;\n    } else if (prompt.toLowerCase().includes('news')) {\n      return `Here are the latest news updates relevant to your ${user.focus} focus: Recent developments show strong growth potential. This aligns with your investment strategy at ${user.firm}.`;\n    } else {\n      return `Thank you for your message, ${user.name}. As a ${user.firm} broker focused on ${user.focus}, I'll provide analysis tailored to your investment approach. How can I assist you with market intelligence today?`;\n    }\n  }\n\n  getMockMemoryData(actorId) {\n    const users = {\n      'Sarah': { name: 'Sarah Chen', firm: 'Goldman Sachs', focus: 'Tech stocks, AI, semiconductors' },\n      'Mike': { name: 'Mike Johnson', firm: 'JP Morgan', focus: 'Healthcare, biotech investments' },\n      'Lisa': { name: 'Lisa Wang', firm: 'Morgan Stanley', focus: 'Energy, renewable investments' }\n    };\n\n    const user = users[actorId] || users['Sarah'];\n    \n    return {\n      actor_id: actorId,\n      profile: user,\n      memories: [\n        {\n          timestamp: new Date().toISOString(),\n          type: 'profile',\n          content: `Broker Profile: ${user.name} from ${user.firm}, focuses on ${user.focus}`\n        },\n        {\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          type: 'conversation',\n          content: 'Previous conversation about market trends and investment strategies'\n        }\n      ],\n      memory_count: 2,\n      last_updated: new Date().toISOString()\n    };\n  }\n\n  getMockSessionHistory(sessionId) {\n    return [\n      {\n        role: 'user',\n        content: 'Hi, I\\'m Sarah Chen from Goldman Sachs. I focus on tech stocks, especially AI and semiconductors.',\n        timestamp: new Date(Date.now() - 7200000).toISOString()\n      },\n      {\n        role: 'assistant',\n        content: 'Welcome Sarah! I\\'ve saved your profile to AgentCore Memory. Given your focus on tech stocks, AI, and semiconductors, I can provide tailored market analysis. What specific information would be most valuable to you today?',\n        timestamp: new Date(Date.now() - 7100000).toISOString()\n      }\n    ];\n  }\n}\n\nexport default new AgentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
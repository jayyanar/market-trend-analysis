{"ast":null,"code":"import axios from 'axios';\nconst MEMORY_ID = 'runtime_us_market_agent_8e082e5c_mem-B1ZetpF2X2';\nconst RUNTIME_ID = 'runtime_us_market_agent_8e082e5c-HYMo6FF9Qn';\n\n// AgentCore Runtime endpoint - will be set via environment variable\nconst AGENTCORE_ENDPOINT = process.env.REACT_APP_AGENTCORE_ENDPOINT || 'https://your-api-gateway-url';\nclass AgentService {\n  constructor() {\n    this.axiosInstance = axios.create({\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  async invokeAgent(prompt, actorId, sessionId) {\n    try {\n      console.log('Invoking agent:', {\n        prompt,\n        actorId,\n        sessionId\n      });\n      const response = await this.axiosInstance.post(`${AGENTCORE_ENDPOINT}/invoke`, {\n        prompt,\n        actor_id: actorId,\n        session_id: sessionId\n      });\n      console.log('Agent response:', response.data);\n\n      // Handle different response formats\n      if (response.data.response && Array.isArray(response.data.response)) {\n        return response.data.response[0];\n      } else if (response.data.response) {\n        return response.data.response;\n      } else {\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Error invoking agent:', error);\n\n      // Fallback to mock response for demo\n      return this.getMockAgentResponse(prompt, actorId);\n    }\n  }\n  async getMemory(actorId) {\n    try {\n      console.log('Fetching memory for actor:', actorId);\n\n      // Direct call to AWS Bedrock Agent Runtime\n      const AWS = window.AWS;\n      if (AWS) {\n        const bedrockClient = new AWS.BedrockAgentRuntime({\n          region: 'us-east-1'\n        });\n        const params = {\n          memoryId: MEMORY_ID,\n          actorId: actorId,\n          maxResults: 10\n        };\n        const result = await bedrockClient.retrieveMemory(params).promise();\n        return {\n          actor_id: actorId,\n          memories: result.memories || [],\n          memory_count: result.memories ? result.memories.length : 0,\n          last_updated: new Date().toISOString()\n        };\n      }\n\n      // Fallback to API Gateway if AWS SDK not available\n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/memory/${actorId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching memory:', error);\n\n      // Return mock data for demo\n      return this.getMockMemoryData(actorId);\n    }\n  }\n  async getSessionHistory(sessionId) {\n    try {\n      console.log('Fetching session history:', sessionId);\n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/session/${sessionId}`);\n      return response.data.messages || [];\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n\n      // Return mock data for demo\n      return this.getMockSessionHistory(sessionId);\n    }\n  }\n\n  // Mock responses for fallback/demo\n  getMockAgentResponse(prompt, actorId) {\n    const users = {\n      'Sarah': {\n        name: 'Sarah Chen',\n        firm: 'Goldman Sachs',\n        focus: 'tech stocks, AI, semiconductors'\n      },\n      'Mike': {\n        name: 'Mike Johnson',\n        firm: 'JP Morgan',\n        focus: 'healthcare, biotech'\n      },\n      'Lisa': {\n        name: 'Lisa Wang',\n        firm: 'Morgan Stanley',\n        focus: 'energy, renewables'\n      }\n    };\n    const user = users[actorId] || users['Sarah'];\n    if (prompt.toLowerCase().includes('nvda') || prompt.toLowerCase().includes('nvidia')) {\n      return `Based on your focus on ${user.focus}, NVDA is currently trading at $875.32, up 2.1% today. Given your investment strategy at ${user.firm}, this aligns well with your portfolio objectives. The AI chip demand continues to drive growth.`;\n    } else if (prompt.toLowerCase().includes('profile') || prompt.toLowerCase().includes('remember')) {\n      return `I remember you're ${user.name} from ${user.firm}, focusing on ${user.focus}. Your profile is stored in my AgentCore Memory and I reference it for all our conversations.`;\n    } else if (prompt.toLowerCase().includes('news')) {\n      return `Here are the latest news updates relevant to your ${user.focus} focus: Recent developments show strong growth potential. This aligns with your investment strategy at ${user.firm}.`;\n    } else {\n      return `Thank you for your message, ${user.name}. As a ${user.firm} broker focused on ${user.focus}, I'll provide analysis tailored to your investment approach. How can I assist you with market intelligence today?`;\n    }\n  }\n  getMockMemoryData(actorId) {\n    const users = {\n      'Sarah': {\n        name: 'Sarah Chen',\n        firm: 'Goldman Sachs',\n        focus: 'Tech stocks, AI, semiconductors'\n      },\n      'Mike': {\n        name: 'Mike Johnson',\n        firm: 'JP Morgan',\n        focus: 'Healthcare, biotech investments'\n      },\n      'Lisa': {\n        name: 'Lisa Wang',\n        firm: 'Morgan Stanley',\n        focus: 'Energy, renewable investments'\n      }\n    };\n    const user = users[actorId] || users['Sarah'];\n    return {\n      actor_id: actorId,\n      profile: user,\n      memories: [{\n        timestamp: new Date().toISOString(),\n        type: 'profile',\n        content: `Broker Profile: ${user.name} from ${user.firm}, focuses on ${user.focus}`\n      }, {\n        timestamp: new Date(Date.now() - 3600000).toISOString(),\n        type: 'conversation',\n        content: 'Previous conversation about market trends and investment strategies'\n      }],\n      memory_count: 2,\n      last_updated: new Date().toISOString()\n    };\n  }\n  getMockSessionHistory(sessionId) {\n    return [{\n      role: 'user',\n      content: 'Hi, I\\'m Sarah Chen from Goldman Sachs. I focus on tech stocks, especially AI and semiconductors.',\n      timestamp: new Date(Date.now() - 7200000).toISOString()\n    }, {\n      role: 'assistant',\n      content: 'Welcome Sarah! I\\'ve saved your profile to AgentCore Memory. Given your focus on tech stocks, AI, and semiconductors, I can provide tailored market analysis. What specific information would be most valuable to you today?',\n      timestamp: new Date(Date.now() - 7100000).toISOString()\n    }];\n  }\n}\nexport default new AgentService();","map":{"version":3,"names":["axios","MEMORY_ID","RUNTIME_ID","AGENTCORE_ENDPOINT","process","env","REACT_APP_AGENTCORE_ENDPOINT","AgentService","constructor","axiosInstance","create","timeout","headers","invokeAgent","prompt","actorId","sessionId","console","log","response","post","actor_id","session_id","data","Array","isArray","error","getMockAgentResponse","getMemory","AWS","window","bedrockClient","BedrockAgentRuntime","region","params","memoryId","maxResults","result","retrieveMemory","promise","memories","memory_count","length","last_updated","Date","toISOString","get","getMockMemoryData","getSessionHistory","messages","getMockSessionHistory","users","name","firm","focus","user","toLowerCase","includes","profile","timestamp","type","content","now","role"],"sources":["/Users/jayyanar/Downloads/techxconf-2025/market-trend-analysis/ui-demo/src/services/agentService.js"],"sourcesContent":["import axios from 'axios';\n\nconst MEMORY_ID = 'runtime_us_market_agent_8e082e5c_mem-B1ZetpF2X2';\nconst RUNTIME_ID = 'runtime_us_market_agent_8e082e5c-HYMo6FF9Qn';\n\n// AgentCore Runtime endpoint - will be set via environment variable\nconst AGENTCORE_ENDPOINT = process.env.REACT_APP_AGENTCORE_ENDPOINT || 'https://your-api-gateway-url';\n\nclass AgentService {\n  constructor() {\n    this.axiosInstance = axios.create({\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n  }\n\n  async invokeAgent(prompt, actorId, sessionId) {\n    try {\n      console.log('Invoking agent:', { prompt, actorId, sessionId });\n      \n      const response = await this.axiosInstance.post(`${AGENTCORE_ENDPOINT}/invoke`, {\n        prompt,\n        actor_id: actorId,\n        session_id: sessionId\n      });\n      \n      console.log('Agent response:', response.data);\n      \n      // Handle different response formats\n      if (response.data.response && Array.isArray(response.data.response)) {\n        return response.data.response[0];\n      } else if (response.data.response) {\n        return response.data.response;\n      } else {\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Error invoking agent:', error);\n      \n      // Fallback to mock response for demo\n      return this.getMockAgentResponse(prompt, actorId);\n    }\n  }\n\n  async getMemory(actorId) {\n    try {\n      console.log('Fetching memory for actor:', actorId);\n      \n      // Direct call to AWS Bedrock Agent Runtime\n      const AWS = window.AWS;\n      if (AWS) {\n        const bedrockClient = new AWS.BedrockAgentRuntime({\n          region: 'us-east-1'\n        });\n        \n        const params = {\n          memoryId: MEMORY_ID,\n          actorId: actorId,\n          maxResults: 10\n        };\n        \n        const result = await bedrockClient.retrieveMemory(params).promise();\n        \n        return {\n          actor_id: actorId,\n          memories: result.memories || [],\n          memory_count: result.memories ? result.memories.length : 0,\n          last_updated: new Date().toISOString()\n        };\n      }\n      \n      // Fallback to API Gateway if AWS SDK not available\n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/memory/${actorId}`);\n      return response.data;\n      \n    } catch (error) {\n      console.error('Error fetching memory:', error);\n      \n      // Return mock data for demo\n      return this.getMockMemoryData(actorId);\n    }\n  }\n\n  async getSessionHistory(sessionId) {\n    try {\n      console.log('Fetching session history:', sessionId);\n      \n      const response = await this.axiosInstance.get(`${AGENTCORE_ENDPOINT}/session/${sessionId}`);\n      return response.data.messages || [];\n      \n    } catch (error) {\n      console.error('Error fetching session history:', error);\n      \n      // Return mock data for demo\n      return this.getMockSessionHistory(sessionId);\n    }\n  }\n\n  // Mock responses for fallback/demo\n  getMockAgentResponse(prompt, actorId) {\n    const users = {\n      'Sarah': { name: 'Sarah Chen', firm: 'Goldman Sachs', focus: 'tech stocks, AI, semiconductors' },\n      'Mike': { name: 'Mike Johnson', firm: 'JP Morgan', focus: 'healthcare, biotech' },\n      'Lisa': { name: 'Lisa Wang', firm: 'Morgan Stanley', focus: 'energy, renewables' }\n    };\n    \n    const user = users[actorId] || users['Sarah'];\n    \n    if (prompt.toLowerCase().includes('nvda') || prompt.toLowerCase().includes('nvidia')) {\n      return `Based on your focus on ${user.focus}, NVDA is currently trading at $875.32, up 2.1% today. Given your investment strategy at ${user.firm}, this aligns well with your portfolio objectives. The AI chip demand continues to drive growth.`;\n    } else if (prompt.toLowerCase().includes('profile') || prompt.toLowerCase().includes('remember')) {\n      return `I remember you're ${user.name} from ${user.firm}, focusing on ${user.focus}. Your profile is stored in my AgentCore Memory and I reference it for all our conversations.`;\n    } else if (prompt.toLowerCase().includes('news')) {\n      return `Here are the latest news updates relevant to your ${user.focus} focus: Recent developments show strong growth potential. This aligns with your investment strategy at ${user.firm}.`;\n    } else {\n      return `Thank you for your message, ${user.name}. As a ${user.firm} broker focused on ${user.focus}, I'll provide analysis tailored to your investment approach. How can I assist you with market intelligence today?`;\n    }\n  }\n\n  getMockMemoryData(actorId) {\n    const users = {\n      'Sarah': { name: 'Sarah Chen', firm: 'Goldman Sachs', focus: 'Tech stocks, AI, semiconductors' },\n      'Mike': { name: 'Mike Johnson', firm: 'JP Morgan', focus: 'Healthcare, biotech investments' },\n      'Lisa': { name: 'Lisa Wang', firm: 'Morgan Stanley', focus: 'Energy, renewable investments' }\n    };\n\n    const user = users[actorId] || users['Sarah'];\n    \n    return {\n      actor_id: actorId,\n      profile: user,\n      memories: [\n        {\n          timestamp: new Date().toISOString(),\n          type: 'profile',\n          content: `Broker Profile: ${user.name} from ${user.firm}, focuses on ${user.focus}`\n        },\n        {\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          type: 'conversation',\n          content: 'Previous conversation about market trends and investment strategies'\n        }\n      ],\n      memory_count: 2,\n      last_updated: new Date().toISOString()\n    };\n  }\n\n  getMockSessionHistory(sessionId) {\n    return [\n      {\n        role: 'user',\n        content: 'Hi, I\\'m Sarah Chen from Goldman Sachs. I focus on tech stocks, especially AI and semiconductors.',\n        timestamp: new Date(Date.now() - 7200000).toISOString()\n      },\n      {\n        role: 'assistant',\n        content: 'Welcome Sarah! I\\'ve saved your profile to AgentCore Memory. Given your focus on tech stocks, AI, and semiconductors, I can provide tailored market analysis. What specific information would be most valuable to you today?',\n        timestamp: new Date(Date.now() - 7100000).toISOString()\n      }\n    ];\n  }\n}\n\nexport default new AgentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}